Given two positive numbers. The numbers may be very large, this algorithm finds the product of two numbers by divide and conquer.

Examples: 
Input :  num1 = 654154154151454545415415454  
         num2 = 63516561563156316545145146514654 
Output : 41549622603955309777243716069997997007620439937711509062916

Explanation
For simplicity let's assume that n is even, the digits of number is n
a = aLaR = aLx10^(n/2) + aR
b = bLbR = bLx10^(n/2) + bR
axb = (aLx10^(n/2)+aR) x (bLx10^(n/2)+bR)
axb = (aLxbL)x10^n + (aLxbR + bLxaR)x10^(n/2) + aRxbR
let c = axb
c2 = aLxbL
c1 = aRxbR
c0 = aLxbR + bLxaR
   = aLxbL + aLxbR + aRxbL + aRxbR - aLxbL - aRxbR
   = (aL+aR)x(bL+bR) - c2 - c1
c = c2x10^n + c0^(n/2) + c1
If n/2 is even, we can apply the same method for computing the product c2,c0 and c1.
If n is a power of 2, we have a recursive algorithm for computing the product of two n-digit integers

Pseudocode
BigInteger Multiply(BigInteger a, BigInteger b)
{
n = max(number of integers in a,b)
if n == 1 return a.value*b.value
else:
         aR = bottom n/2 digits of a
         aL = top remaining digits of a
         bR = bottom n/2 digits of b
         bL = top remaining digits of b
         x1 = Multiply(aL,bL)
         x2 = Multiply(aR,bR)
         x3 = Multiply(aL+aR,bL+bR)
         return x1*10^n + (x3-x2-x1)*10^(n/2) + x2
}
Time Complixity: O(n^(log2 3) = n^1.585 )
