QuickSort picks an element as pivot and partitions the given array around the pick pivot.
Key process in QuickSort is partition().
Target of partition: given an array and an element x of array as pivot, put x at its correct position in sorted array and put all smaller elements(smaller
than x)before x, and put all greater elements(greater than x)after x.

Pseudocode for recursive QuickSort function:
quicksort(arr[], low, high)
{
  if (low < high)
  {
  /* pi is partitioning index, arr[pi] is now
           at right place */
  pi = partition(arr, low, high);
  quicksort(arr[],low,pi-1)
  quicksort(arr[],pi+1,high)
  }
}

Pseudocode for partition()
partition(arr[], low, high)
{
  pivot=arr[high];
  i=(low-1);
  for(j=low; j<=high-1;j++)
  {
    if (arr[j]<=pivot)
    {
      i++;
      swap arr[i] and arr[j];
    }
  }
  swap arr[i+1] and arr[high]
  return i+1;
}

Illustration:
arr[] = {10, 80, 30, 90, 40, 50, 70}
Indexes:  0   1   2   3   4   5   6 

low = 0, high =  6, pivot = arr[h] = 70
Initialize index of smaller element, i = -1

Traverse elements from j = low to high-1
j = 0 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])// No change as i and j are same
i = 0 

j = 1 : Since arr[j] > pivot, do nothing
// No change in i and arr[]

j = 2 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])
i = 1
arr[] = {10, 30, 80, 90, 40, 50, 70} // We swap 80 and 30 

j = 3 : Since arr[j] > pivot, do nothing
// No change in i and arr[]

j = 4 : Since arr[j] <= pivot, do i++ and swap(arr[i], arr[j])
i = 2

arr[] = {10, 30, 40, 90, 80, 50, 70} // 80 and 40 Swapped
j = 5 : Since arr[j] <= pivot, do i++ and swap arr[i] with arr[j] 
i = 3 
arr[] = {10, 30, 40, 50, 80, 90, 70} // 90 and 50 Swapped 

We come out of loop because j is now equal to high-1.
Finally we place pivot at correct position by swapping
arr[i+1] and arr[high] (or pivot) 
arr[] = {10, 30, 40, 50, 70, 90, 80} // 80 and 70 Swapped 

Now 70 is at its correct place. All elements smaller than
70 are before it and all elements greater than 70 are after
it.
